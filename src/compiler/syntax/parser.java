
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 10 15:08:31 CEST 2024
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;
import compiler.pec.AccionesSemanticas;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 10 15:08:31 CEST 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\056\002\000\002\002" +
    "\004\000\002\011\002\000\002\003\005\000\002\004\004" +
    "\000\002\004\003\000\002\017\004\000\002\017\003\000" +
    "\002\020\006\000\002\021\004\000\002\021\003\000\002" +
    "\022\011\000\002\023\003\000\002\023\003\000\002\024" +
    "\004\000\002\024\003\000\002\025\005\000\002\025\005" +
    "\000\002\026\004\000\002\005\004\000\002\005\003\000" +
    "\002\027\004\000\002\006\003\000\002\006\004\000\002" +
    "\012\004\000\002\012\003\000\002\013\012\000\002\013" +
    "\012\000\002\007\004\000\002\007\005\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\005\000" +
    "\002\016\004\000\002\016\004\000\002\010\012\000\002" +
    "\010\013\000\002\030\003\000\002\030\003\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\004" +
    "\000\002\030\004\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\030\003\000\002" +
    "\031\006\000\002\032\006\000\002\032\005\000\002\051" +
    "\003\000\002\051\005\000\002\033\006\000\002\033\005" +
    "\000\002\034\004\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\055\004" +
    "\000\002\055\005\000\002\036\005\000\002\037\006\000" +
    "\002\040\003\000\002\040\003\000\002\041\006\000\002" +
    "\042\011\000\002\042\007\000\002\043\012\000\002\044" +
    "\004\000\002\044\003\000\002\045\010\000\002\046\007" +
    "\000\002\046\003\000\002\047\007\000\002\050\004\000" +
    "\002\052\007\000\002\052\007\000\002\053\003\000\002" +
    "\053\003\000\002\054\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\014\027\000\031\000\043\000\044\000\045" +
    "\000\001\002\000\004\002\321\001\002\000\014\027\007" +
    "\031\ufffe\043\ufffe\044\ufffe\045\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\004\045\316\001\002\000\014\027\007" +
    "\031\ufffe\043\ufffe\044\ufffe\045\ufffe\001\002\000\012\031" +
    "\ufffe\043\015\044\ufffe\045\ufffe\001\002\000\012\031\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\001\002\000\010\031\035\044" +
    "\033\045\040\001\002\000\030\012\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\040\ufffe\041\ufffe\043\015\044" +
    "\ufffe\045\ufffe\001\002\000\004\031\017\001\002\000\026" +
    "\012\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\001\002\000\004\045\020" +
    "\001\002\000\004\010\021\001\002\000\006\045\023\046" +
    "\022\001\002\000\004\011\ufff4\001\002\000\004\011\ufff3" +
    "\001\002\000\004\011\025\001\002\000\004\016\026\001" +
    "\002\000\030\012\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045\ufff5\001" +
    "\002\000\026\012\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffb\001\002\000\006" +
    "\031\313\044\033\001\002\000\006\037\272\045\271\001" +
    "\002\000\010\031\035\044\033\045\040\001\002\000\004" +
    "\045\056\001\002\000\026\012\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1\044\ufff1\045\ufff1" +
    "\001\002\000\004\002\uffe7\001\002\000\004\045\042\001" +
    "\002\000\004\016\054\001\002\000\010\016\ufffe\017\ufffe" +
    "\024\052\001\002\000\006\016\ufffe\017\045\001\002\000" +
    "\004\016\uffee\001\002\000\004\045\042\001\002\000\004" +
    "\016\uffec\001\002\000\004\016\uffed\001\002\000\006\016" +
    "\uffeb\017\uffeb\001\002\000\006\016\uffea\017\uffea\001\002" +
    "\000\004\046\053\001\002\000\006\016\uffe9\017\uffe9\001" +
    "\002\000\026\012\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\040\uffef\041\uffef\044\uffef\045\uffef\001\002\000" +
    "\004\016\267\001\002\000\012\014\057\016\ufffe\017\ufffe" +
    "\024\052\001\002\000\010\015\ufffe\031\065\045\060\001" +
    "\002\000\004\045\266\001\002\000\006\015\uffe0\017\264" +
    "\001\002\000\004\015\067\001\002\000\004\015\uffe2\001" +
    "\002\000\004\015\uffe1\001\002\000\004\045\066\001\002" +
    "\000\006\015\uffde\017\uffde\001\002\000\004\012\070\001" +
    "\002\000\026\012\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\040\ufffe\041\ufffe\043\015\045\ufffe\001\002\000" +
    "\024\012\072\031\116\032\107\033\110\034\101\035\117" +
    "\040\074\041\112\045\114\001\002\000\024\012\072\031" +
    "\116\032\107\033\110\034\101\035\117\040\074\041\112" +
    "\045\114\001\002\000\026\012\uffc0\013\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0" +
    "\001\002\000\014\014\133\016\254\021\142\045\143\046" +
    "\136\001\002\000\026\012\uffc1\013\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\001" +
    "\002\000\024\012\072\031\116\032\107\033\110\034\101" +
    "\035\117\040\074\041\112\045\114\001\002\000\006\023" +
    "\uffb6\024\uffb6\001\002\000\026\012\uffc3\013\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\040\uffc3\041\uffc3\042\uffc3\045" +
    "\uffc3\001\002\000\004\014\224\001\002\000\004\016\223" +
    "\001\002\000\006\023\215\024\216\001\002\000\026\012" +
    "\uffbc\013\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\045\uffbc\001\002\000\026\012\uffc4\013" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\045\uffc4\001\002\000\024\012\uffc6\013\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\040\uffc6\041\uffc6\045\uffc6" +
    "\001\002\000\004\014\207\001\002\000\004\014\201\001" +
    "\002\000\026\012\uffbd\013\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\001\002\000" +
    "\004\014\173\001\002\000\026\012\uffbe\013\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe\045" +
    "\uffbe\001\002\000\016\005\131\010\127\014\130\023\uffb7" +
    "\024\uffb7\045\042\001\002\000\026\012\uffbf\013\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\045\uffbf\001\002\000\004\045\042\001\002\000\004\014" +
    "\167\001\002\000\026\012\uffc2\013\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\045\uffc2\001" +
    "\002\000\006\031\uffe5\044\uffe5\001\002\000\026\012\uffc5" +
    "\013\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\045\uffc5\001\002\000\024\012\072\013\126" +
    "\032\107\033\110\034\101\035\117\040\074\041\112\045" +
    "\125\001\002\000\024\012\uffc7\013\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\040\uffc7\041\uffc7\045\uffc7\001\002\000" +
    "\014\005\131\010\127\014\130\023\uffb7\024\uffb7\001\002" +
    "\000\006\031\uffe4\044\uffe4\001\002\000\012\014\133\021" +
    "\142\045\143\046\136\001\002\000\014\014\133\015\135" +
    "\021\142\045\143\046\136\001\002\000\004\016\132\001" +
    "\002\000\026\012\uffb9\013\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\040\uffb9\041\uffb9\042\uffb9\045\uffb9\001\002\000" +
    "\012\014\133\021\142\045\143\046\136\001\002\000\026" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\022\uffd0\025\uffd0\001\002\000\026\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\011\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\022\uffcc\025\uffcc\001\002\000\026\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\015\uffda\016\uffda\017\uffda\022" +
    "\uffda\025\uffda\001\002\000\022\004\146\005\152\006\145" +
    "\007\151\015\uffcb\017\161\022\147\025\150\001\002\000" +
    "\026\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\022\uffcf\025\uffcf\001\002\000\004\015" +
    "\160\001\002\000\012\014\133\021\142\045\143\046\136" +
    "\001\002\000\032\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\127\011\uffd9\014\130\015\uffd9\016\uffd9\017\uffd9\022\uffd9" +
    "\025\uffd9\001\002\000\026\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\025\uffd4" +
    "\001\002\000\012\014\133\021\142\045\143\046\136\001" +
    "\002\000\012\014\133\021\142\045\143\046\136\001\002" +
    "\000\012\014\133\021\142\045\143\046\136\001\002\000" +
    "\012\014\133\021\142\045\143\046\136\001\002\000\012" +
    "\014\133\021\142\045\143\046\136\001\002\000\026\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\022\uffd5\025\uffd5\001\002\000\026\004\146\005" +
    "\152\006\145\007\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\022\147\025\150\001\002\000\026\004\146\005\152\006" +
    "\145\007\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3" +
    "\025\uffd3\001\002\000\026\004\146\005\152\006\145\007" +
    "\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\022\uffd2\025\150" +
    "\001\002\000\026\004\uffd7\005\152\006\145\007\uffd7\011" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\025\uffd7\001\002" +
    "\000\026\004\uffd6\005\152\006\uffd6\007\uffd6\011\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\022\uffd6\025\uffd6\001\002\000\026" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\022\uffcd\025\uffcd\001\002\000\012\014\133" +
    "\021\142\045\143\046\136\001\002\000\004\015\uffca\001" +
    "\002\000\020\004\146\005\152\006\145\007\151\015\164" +
    "\022\147\025\150\001\002\000\026\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8" +
    "\025\uffd8\001\002\000\020\004\146\005\152\006\145\007" +
    "\151\011\166\022\147\025\150\001\002\000\032\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\011\uffce\015\uffce\016\uffce\017" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\001\002\000\012" +
    "\014\133\021\142\045\143\046\136\001\002\000\020\004" +
    "\146\005\152\006\145\007\151\015\171\022\147\025\150" +
    "\001\002\000\022\012\072\032\107\033\110\034\101\035" +
    "\117\040\074\041\112\045\125\001\002\000\026\012\uffac" +
    "\013\uffac\032\uffac\033\uffac\034\uffac\035\uffac\040\uffac\041" +
    "\uffac\042\uffac\045\uffac\001\002\000\012\014\133\021\142" +
    "\045\143\046\136\001\002\000\020\004\146\005\152\006" +
    "\145\007\151\015\175\022\147\025\150\001\002\000\022" +
    "\012\072\032\107\033\110\034\101\035\117\040\074\041" +
    "\112\045\125\001\002\000\026\012\uffb3\013\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3\042\177\045" +
    "\uffb3\001\002\000\022\012\072\032\107\033\110\034\101" +
    "\035\117\040\074\041\112\045\125\001\002\000\026\012" +
    "\uffb4\013\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\045\uffb4\001\002\000\014\014\133\015" +
    "\ufffe\021\142\045\143\046\136\001\002\000\004\015\205" +
    "\001\002\000\020\004\146\005\152\006\145\007\151\015" +
    "\uffa5\022\147\025\150\001\002\000\004\015\uffa6\001\002" +
    "\000\004\016\206\001\002\000\026\012\uffa9\013\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\045\uffa9\001\002\000\006\015\ufffe\047\211\001\002\000" +
    "\004\015\213\001\002\000\004\015\uffa7\001\002\000\004" +
    "\015\uffa8\001\002\000\004\016\214\001\002\000\026\012" +
    "\uffaa\013\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\045\uffaa\001\002\000\012\014\133\021" +
    "\142\045\143\046\136\001\002\000\012\014\133\021\142" +
    "\045\143\046\136\001\002\000\020\004\146\005\152\006" +
    "\145\007\151\016\220\022\147\025\150\001\002\000\026" +
    "\012\uffb8\013\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\045\uffb8\001\002\000\020\004\146" +
    "\005\152\006\145\007\151\016\222\022\147\025\150\001" +
    "\002\000\026\012\uffb5\013\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\040\uffb5\041\uffb5\042\uffb5\045\uffb5\001\002\000" +
    "\026\012\uffab\013\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\040\uffab\041\uffab\042\uffab\045\uffab\001\002\000\012\014" +
    "\133\021\142\045\143\046\136\001\002\000\020\004\146" +
    "\005\152\006\145\007\151\015\226\022\147\025\150\001" +
    "\002\000\004\012\227\001\002\000\004\026\232\001\002" +
    "\000\010\013\ufffe\026\232\036\241\001\002\000\010\013" +
    "\uffb0\026\uffb0\036\uffb0\001\002\000\004\046\233\001\002" +
    "\000\004\020\234\001\002\000\004\012\072\001\002\000" +
    "\004\030\236\001\002\000\004\016\237\001\002\000\010" +
    "\013\uffaf\026\uffaf\036\uffaf\001\002\000\004\013\250\001" +
    "\002\000\004\020\244\001\002\000\010\013\uffb1\026\uffb1" +
    "\036\uffb1\001\002\000\004\013\uffad\001\002\000\004\012" +
    "\072\001\002\000\004\030\246\001\002\000\004\016\247" +
    "\001\002\000\004\013\uffae\001\002\000\026\012\uffb2\013" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\045\uffb2\001\002\000\026\012\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\040\ufff2\041\ufff2\044\ufff2" +
    "\045\ufff2\001\002\000\024\012\072\013\253\032\107\033" +
    "\110\034\101\035\117\040\074\041\112\045\125\001\002" +
    "\000\006\031\uffe3\044\uffe3\001\002\000\026\012\uffbb\013" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\045\uffbb\001\002\000\020\004\146\005\152\006" +
    "\145\007\151\016\256\022\147\025\150\001\002\000\026" +
    "\012\uffba\013\uffba\032\uffba\033\uffba\034\uffba\035\uffba\040" +
    "\uffba\041\uffba\042\uffba\045\uffba\001\002\000\024\012\072" +
    "\031\116\032\107\033\110\034\101\035\117\040\074\041" +
    "\112\045\114\001\002\000\024\012\072\013\261\032\107" +
    "\033\110\034\101\035\117\040\074\041\112\045\125\001" +
    "\002\000\030\012\uffc8\013\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\001" +
    "\002\000\024\012\072\013\263\032\107\033\110\034\101" +
    "\035\117\040\074\041\112\045\125\001\002\000\030\012" +
    "\uffc9\013\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\045\uffc9\001\002\000\006\031" +
    "\065\045\060\001\002\000\004\015\uffdf\001\002\000\006" +
    "\015\uffdd\017\uffdd\001\002\000\026\012\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\001\002\000\004\002\ufffc\001\002\000\004\014" +
    "\304\001\002\000\004\014\273\001\002\000\004\015\274" +
    "\001\002\000\004\012\275\001\002\000\026\012\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\040\ufffe\041\ufffe" +
    "\043\015\045\ufffe\001\002\000\024\012\072\031\116\032" +
    "\107\033\110\034\101\035\117\040\074\041\112\045\114" +
    "\001\002\000\024\012\072\031\116\032\107\033\110\034" +
    "\101\035\117\040\074\041\112\045\114\001\002\000\024" +
    "\012\072\013\301\032\107\033\110\034\101\035\117\040" +
    "\074\041\112\045\125\001\002\000\004\002\uffdc\001\002" +
    "\000\024\012\072\013\303\032\107\033\110\034\101\035" +
    "\117\040\074\041\112\045\125\001\002\000\004\002\uffdb" +
    "\001\002\000\010\015\ufffe\031\065\045\060\001\002\000" +
    "\004\015\306\001\002\000\004\012\307\001\002\000\026" +
    "\012\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\043\015\045\ufffe\001\002\000\024\012\072" +
    "\031\116\032\107\033\110\034\101\035\117\040\074\041" +
    "\112\045\114\001\002\000\006\031\uffe6\044\uffe6\001\002" +
    "\000\004\002\uffe8\001\002\000\004\045\314\001\002\000" +
    "\004\014\057\001\002\000\012\031\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\001\002\000\004\046\317\001\002\000\004\016" +
    "\320\001\002\000\014\027\ufff8\031\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\006\002\003\056\004\001\001\000\002\001" +
    "\001\000\012\003\005\011\011\017\010\020\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\011\017" +
    "\314\020\007\001\001\000\010\011\015\021\012\022\013" +
    "\001\001\000\002\001\001\000\016\004\027\010\036\012" +
    "\030\013\031\024\033\025\035\001\001\000\010\011\015" +
    "\021\026\022\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\036\012" +
    "\311\013\031\001\001\000\002\001\001\000\012\010\036" +
    "\012\267\013\031\025\250\001\001\000\006\026\054\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\040\027\042\001\001\000\002\001\001\000\006\006" +
    "\047\011\050\001\001\000\006\005\043\011\045\001\001" +
    "\000\002\001\001\000\006\026\046\027\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\047\011\050\001\001" +
    "\000\012\011\063\014\061\015\062\016\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\015\021\070\022\013" +
    "\001\001\000\046\007\120\024\075\025\035\031\076\032" +
    "\101\033\103\034\122\035\105\036\104\037\077\040\102" +
    "\041\117\042\074\043\072\047\114\050\112\052\110\055" +
    "\121\001\001\000\044\024\256\025\035\031\076\032\101" +
    "\033\103\034\257\035\105\036\104\037\077\040\102\041" +
    "\117\042\074\043\072\047\114\050\112\052\110\055\121" +
    "\001\001\000\002\001\001\000\010\030\254\031\133\032" +
    "\137\001\001\000\002\001\001\000\042\025\250\031\076" +
    "\032\101\033\103\034\251\035\105\036\104\037\077\040" +
    "\102\041\117\042\074\043\072\047\114\050\112\052\110" +
    "\055\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\040\027\042\001\001\000" +
    "\002\001\001\000\006\026\054\027\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\031\076\032\101\033\103\035\123\036\104" +
    "\037\077\040\102\041\117\042\074\043\072\047\114\050" +
    "\112\052\110\055\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\164\031\133\032" +
    "\137\001\001\000\012\030\136\031\133\032\137\051\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\162\031\133\032\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\143\031\133\032\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\156\031\133\032\137\001\001\000\010\030\155\031\133" +
    "\032\137\001\001\000\010\030\154\031\133\032\137\001" +
    "\001\000\010\030\153\031\133\032\137\001\001\000\010" +
    "\030\152\031\133\032\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\136\031\133\032\137\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\167\031\133\032\137\001\001" +
    "\000\002\001\001\000\036\031\076\032\101\033\103\035" +
    "\171\036\104\037\077\040\102\041\117\042\074\043\072" +
    "\047\114\050\112\052\110\055\121\001\001\000\002\001" +
    "\001\000\010\030\173\031\133\032\137\001\001\000\002" +
    "\001\001\000\036\031\076\032\101\033\103\035\175\036" +
    "\104\037\077\040\102\041\117\042\074\043\072\047\114" +
    "\050\112\052\110\055\121\001\001\000\002\001\001\000" +
    "\036\031\076\032\101\033\103\035\177\036\104\037\077" +
    "\040\102\041\117\042\074\043\072\047\114\050\112\052" +
    "\110\055\121\001\001\000\002\001\001\000\014\011\203" +
    "\030\202\031\133\032\137\054\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\211\053\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\220\031\133\032" +
    "\137\001\001\000\010\030\216\031\133\032\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\224\031\133" +
    "\032\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\227\045\230\001\001\000\010\011\242\045\241" +
    "\046\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\031\076\032\101\033\103\035\123\036\104\037\077\040" +
    "\102\041\117\042\074\043\072\047\114\050\112\052\110" +
    "\055\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\025\250\031\076" +
    "\032\101\033\103\034\261\035\105\036\104\037\077\040" +
    "\102\041\117\042\074\043\072\047\114\050\112\052\110" +
    "\055\121\001\001\000\036\031\076\032\101\033\103\035" +
    "\123\036\104\037\077\040\102\041\117\042\074\043\072" +
    "\047\114\050\112\052\110\055\121\001\001\000\002\001" +
    "\001\000\036\031\076\032\101\033\103\035\123\036\104" +
    "\037\077\040\102\041\117\042\074\043\072\047\114\050" +
    "\112\052\110\055\121\001\001\000\002\001\001\000\006" +
    "\015\264\016\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\015\021\275\022\013\001\001\000\044\024\276" +
    "\025\035\031\076\032\101\033\103\034\277\035\105\036" +
    "\104\037\077\040\102\041\117\042\074\043\072\047\114" +
    "\050\112\052\110\055\121\001\001\000\042\025\250\031" +
    "\076\032\101\033\103\034\301\035\105\036\104\037\077" +
    "\040\102\041\117\042\074\043\072\047\114\050\112\052" +
    "\110\055\121\001\001\000\036\031\076\032\101\033\103" +
    "\035\123\036\104\037\077\040\102\041\117\042\074\043" +
    "\072\047\114\050\112\052\110\055\121\001\001\000\002" +
    "\001\001\000\036\031\076\032\101\033\103\035\123\036" +
    "\104\037\077\040\102\041\117\042\074\043\072\047\114" +
    "\050\112\052\110\055\121\001\001\000\002\001\001\000" +
    "\012\011\063\014\304\015\062\016\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\015\021\307\022" +
    "\013\001\001\000\046\007\310\024\075\025\035\031\076" +
    "\032\101\033\103\034\122\035\105\036\104\037\077\040" +
    "\102\041\117\042\074\043\072\047\114\050\112\052\110" +
    "\055\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	AccionesSemanticas   as					  = new AccionesSemanticas();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opcionesEscribeEnt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opcionesEscribeEnt ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opcionesEscribe ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opcionesEscribe ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt CLOSE_KEY SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // porDefecto ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // casosAlternativa ::= casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ref ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ref ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaSalida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaAlternativas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= sentenciaSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= sentenciaAsignacionSuma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sentenciaIncremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentenciaDevuelve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listadoSentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listadoSentencias ::= listadoSentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque ::= OPEN_PARENTHESIS listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque ::= OPEN_PARENTHESIS seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= expresion COLON parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion AND_LOGICA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion EQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion LOWER_THAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion PLUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seccionParametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccionParametros ::= declaracionParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos funcion1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
				as.accionDeclaracionFuncion( id );
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos funcion1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
				as.accionDeclaracionFuncion( id );
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionFunciones ::= funcionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seccionFunciones ::= funcion seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id1 ::= ASSIGN NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id1 ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // id ::= IDENTIFICADOR id1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs1 ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs1 ::= COLON listadoIDs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listadoIDs ::= id listadoIDs1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tamTipo ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom1 ::= seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom1 ::= seccionVariables seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= seccionConstantes seccionTipos axiom1 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

